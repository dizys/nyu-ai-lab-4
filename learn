#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
kNN algorithm and Naive Bayes implementations
by Ziyang Zeng(zz2960)
Spring 2022
"""

import pandas as pd
import argparse
from ml import KNN, NaiveBayes, metrics, LabelMetrics
from typing import Dict, List, Union


def print_prediction_comparisons(test_df: pd.DataFrame, predictions: List[Union[str, int]]):
    for i in range(len(test_df)):
        print(f"want={test_df.iloc[i, -1]} got={predictions[i]}")


def print_metrics(metrics_dict: Dict[str, LabelMetrics]):
    for label in sorted(metrics_dict.keys()):
        print(
            f"Label={label} Precision={metrics_dict[label]['correct']}/{metrics_dict[label]['predicted']} Recall={metrics_dict[label]['correct']}/{metrics_dict[label]['true']}")


def main():
    parser = argparse.ArgumentParser(
        description="kNN algorithm and Naive Bayes implementations.")
    parser.add_argument(
        "--train", help="the training csv data file", type=str, required=True)
    parser.add_argument(
        "--test", help="the testing csv data file", type=str, required=True)
    parser.add_argument(
        "-k", help="if > 0 indicates to use kNN and also the value of K (if 0, do Naive Bayes')", type=int, required=False,
        default=0)
    parser.add_argument(
        "-c", help="if > 0 indicates the Laplacian correction to use (0 means don't use one)", type=float, required=False, default=0)
    parser.add_argument(
        "-v", "--verbose", help="outputs each predicted vs actual label", action="store_true", default=False, required=False)
    args = parser.parse_args()

    k = args.k
    c = args.c

    if k < 0:
        print("Error: k must be >= 0")
        exit(1)
    if c < 0:
        print("Error: c must be >= 0")
        exit(1)
    if k > 0 and c > 0:
        print("Error: cannot use both k and c")
        exit(1)

    train_df = pd.read_csv(args.train, header=None)
    test_df = pd.read_csv(args.test, header=None)

    if k > 0:
        knn = KNN(k, verbose=args.verbose)
        knn.train(train_df)
        predictions = knn.predict_on_df(test_df)
    else:
        train_df = train_df.astype(str)
        test_df = test_df.astype(str)
        naive_bayes = NaiveBayes(c, verbose=args.verbose)
        naive_bayes.train(train_df)
        predictions = naive_bayes.predict_on_df(test_df)

    if args.verbose:
        print_prediction_comparisons(test_df, predictions)

    metrics_dict = metrics(test_df, predictions)
    print_metrics(metrics_dict)


if __name__ == '__main__':
    main()
